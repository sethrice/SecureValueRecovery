/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub unsafe fn as_ptr(&self) -> *const T {
        ::core::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
        ::core::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::core::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
impl<T> ::core::clone::Clone for __IncompleteArrayField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const UINTMAX_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const false_: u32 = 0;
pub const true_: u32 = 1;
pub const __bool_true_false_are_defined: u32 = 1;
pub const SGX_FLAGS_INITTED: u32 = 1;
pub const SGX_FLAGS_DEBUG: u32 = 2;
pub const SGX_FLAGS_MODE64BIT: u32 = 4;
pub const SGX_FLAGS_PROVISION_KEY: u32 = 16;
pub const SGX_FLAGS_EINITTOKEN_KEY: u32 = 32;
pub const SGX_FLAGS_KSS: u32 = 128;
pub const SGX_XFRM_LEGACY: u32 = 3;
pub const SGX_XFRM_AVX: u32 = 6;
pub const SGX_XFRM_AVX512: u32 = 230;
pub const SGX_XFRM_MPX: u32 = 24;
pub const SGX_XFRM_PKRU: u32 = 512;
pub const SGX_XFRM_RESERVED: i32 = -744;
pub const SGX_KEYSELECT_EINITTOKEN: u32 = 0;
pub const SGX_KEYSELECT_PROVISION: u32 = 1;
pub const SGX_KEYSELECT_PROVISION_SEAL: u32 = 2;
pub const SGX_KEYSELECT_REPORT: u32 = 3;
pub const SGX_KEYSELECT_SEAL: u32 = 4;
pub const SGX_KEYPOLICY_MRENCLAVE: u32 = 1;
pub const SGX_KEYPOLICY_MRSIGNER: u32 = 2;
pub const SGX_KEYPOLICY_NOISVPRODID: u32 = 4;
pub const SGX_KEYPOLICY_CONFIGID: u32 = 8;
pub const SGX_KEYPOLICY_ISVFAMILYID: u32 = 16;
pub const SGX_KEYPOLICY_ISVEXTPRODID: u32 = 32;
pub const SGX_KEYID_SIZE: u32 = 32;
pub const SGX_CPUSVN_SIZE: u32 = 16;
pub const SGX_CONFIGID_SIZE: u32 = 64;
pub const SGX_KEY_REQUEST_RESERVED2_BYTES: u32 = 434;
pub const SGX_HASH_SIZE: u32 = 32;
pub const SGX_MAC_SIZE: u32 = 16;
pub const SGX_REPORT_DATA_SIZE: u32 = 64;
pub const SGX_ISVEXT_PROD_ID_SIZE: u32 = 16;
pub const SGX_ISV_FAMILY_ID_SIZE: u32 = 16;
pub const SGX_TARGET_INFO_RESERVED1_BYTES: u32 = 2;
pub const SGX_TARGET_INFO_RESERVED2_BYTES: u32 = 8;
pub const SGX_TARGET_INFO_RESERVED3_BYTES: u32 = 384;
pub const SGX_REPORT_BODY_RESERVED1_BYTES: u32 = 12;
pub const SGX_REPORT_BODY_RESERVED2_BYTES: u32 = 32;
pub const SGX_REPORT_BODY_RESERVED3_BYTES: u32 = 32;
pub const SGX_REPORT_BODY_RESERVED4_BYTES: u32 = 42;
pub const SGX_PLATFORM_INFO_SIZE: u32 = 101;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const MB_CUR_MAX: u32 = 1;
pub const MAX_EX_FEATURES_COUNT: u32 = 32;
pub const SGX_CREATE_ENCLAVE_EX_PCL_BIT_IDX: u32 = 0;
pub const SGX_CREATE_ENCLAVE_EX_PCL: u32 = 1;
pub const SGX_CREATE_ENCLAVE_EX_SWITCHLESS_BIT_IDX: u32 = 1;
pub const SGX_CREATE_ENCLAVE_EX_SWITCHLESS: u32 = 2;
pub const SGX_CREATE_ENCLAVE_EX_KSS_BIT_IDX: u32 = 2;
pub const SGX_CREATE_ENCLAVE_EX_KSS: u32 = 4;
pub const _SGX_LAST_EX_FEATURE_IDX_: u32 = 2;
pub const SGX_DEBUG_FLAG: u32 = 1;
pub const SGXSD_AES_GCM_IV_SIZE: u32 = 12;
pub const SGXSD_AES_GCM_MAC_SIZE: u32 = 16;
pub const SGXSD_AES_GCM_KEY_SIZE: u32 = 32;
pub const SGXSD_CURVE25519_KEY_SIZE: u32 = 32;
pub const SGXSD_SHA256_HASH_SIZE: u32 = 32;
pub type __int8_t = libc::c_schar;
pub type __uint8_t = libc::c_uchar;
pub type __int16_t = libc::c_short;
pub type __uint16_t = libc::c_ushort;
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __int64_t = libc::c_long;
pub type __uint64_t = libc::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __int_fast8_t = __int8_t;
pub type __uint_fast8_t = __uint8_t;
pub type __int_fast16_t = libc::c_long;
pub type __uint_fast16_t = libc::c_ulong;
pub type __int_fast32_t = libc::c_long;
pub type __uint_fast32_t = libc::c_ulong;
pub type __int_fast64_t = libc::c_long;
pub type __uint_fast64_t = libc::c_ulong;
pub type __off_t = libc::c_long;
pub type __intptr_t = __int64_t;
pub type __uintptr_t = __uint64_t;
pub type __ptrdiff_t = __int64_t;
pub type __size_t = libc::c_ulong;
pub type __ssize_t = libc::c_long;
pub type __double_t = f64;
pub type __float_t = f32;
pub type __clock_t = libc::c_long;
pub type __time_t = libc::c_long;
pub type __va_list = __builtin_va_list;
pub type __wint_t = libc::c_uint;
pub type __wctype_t = libc::c_ulong;
pub type __wctrans_t = *mut libc::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __c: libc::c_int,
    pub __v: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wc: __wint_t,
    pub __wcb: [libc::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wc as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__mbstate_t__bindgen_ty_1), "::", stringify!(__wc))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wcb as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__mbstate_t__bindgen_ty_1), "::", stringify!(__wcb))
    );
}
impl Default for __mbstate_t__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::core::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__mbstate_t>())).__c as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__mbstate_t), "::", stringify!(__c))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__mbstate_t>())).__v as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(__mbstate_t), "::", stringify!(__v))
    );
}
impl Default for __mbstate_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __intmax_t = __int64_t;
pub type __uintmax_t = __uint64_t;
pub type int_least8_t = __int_least8_t;
pub type uint_least8_t = __uint_least8_t;
pub type int_least16_t = __int_least16_t;
pub type uint_least16_t = __uint_least16_t;
pub type int_least32_t = __int_least32_t;
pub type uint_least32_t = __uint_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = __int_fast8_t;
pub type uint_fast8_t = __uint_fast8_t;
pub type int_fast16_t = __int_fast16_t;
pub type uint_fast16_t = __uint_fast16_t;
pub type int_fast32_t = __int_fast32_t;
pub type uint_fast32_t = __uint_fast32_t;
pub type int_fast64_t = __int_fast64_t;
pub type uint_fast64_t = __uint_fast64_t;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub const KBUPD_REQUEST_TYPE_ANY: kbupd_request_type = 0;
pub const KBUPD_REQUEST_TYPE_BACKUP: kbupd_request_type = 1;
pub const KBUPD_REQUEST_TYPE_RESTORE: kbupd_request_type = 2;
pub const KBUPD_REQUEST_TYPE_DELETE: kbupd_request_type = 3;
pub type kbupd_request_type = u32;
pub use self::kbupd_request_type as kbupd_request_type_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct sgxsd_server_init_args {}
#[test]
fn bindgen_test_layout_sgxsd_server_init_args() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_server_init_args>(),
        0usize,
        concat!("Size of: ", stringify!(sgxsd_server_init_args))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_server_init_args>(),
        1usize,
        concat!("Alignment of ", stringify!(sgxsd_server_init_args))
    );
}
pub type sgxsd_server_init_args_t = sgxsd_server_init_args;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct sgxsd_server_handle_call_args {
    pub backup_id: [u8; 32usize],
    pub request_type: u32,
}
#[test]
fn bindgen_test_layout_sgxsd_server_handle_call_args() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_server_handle_call_args>(),
        36usize,
        concat!("Size of: ", stringify!(sgxsd_server_handle_call_args))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_server_handle_call_args>(),
        4usize,
        concat!("Alignment of ", stringify!(sgxsd_server_handle_call_args))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_server_handle_call_args>())).backup_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_server_handle_call_args),
            "::",
            stringify!(backup_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_server_handle_call_args>())).request_type as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_server_handle_call_args),
            "::",
            stringify!(request_type)
        )
    );
}
pub type sgxsd_server_handle_call_args_t = sgxsd_server_handle_call_args;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct sgxsd_server_terminate_args {}
#[test]
fn bindgen_test_layout_sgxsd_server_terminate_args() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_server_terminate_args>(),
        0usize,
        concat!("Size of: ", stringify!(sgxsd_server_terminate_args))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_server_terminate_args>(),
        1usize,
        concat!("Alignment of ", stringify!(sgxsd_server_terminate_args))
    );
}
pub type sgxsd_server_terminate_args_t = sgxsd_server_terminate_args;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct sgxsd_ra_get_quote_args {
    pub args: *const libc::c_void,
}
#[test]
fn bindgen_test_layout_sgxsd_ra_get_quote_args() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_ra_get_quote_args>(),
        8usize,
        concat!("Size of: ", stringify!(sgxsd_ra_get_quote_args))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_ra_get_quote_args>(),
        8usize,
        concat!("Alignment of ", stringify!(sgxsd_ra_get_quote_args))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_ra_get_quote_args>())).args as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sgxsd_ra_get_quote_args), "::", stringify!(args))
    );
}
impl Default for sgxsd_ra_get_quote_args {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgxsd_ra_get_quote_args_t = sgxsd_ra_get_quote_args;
pub type wchar_t = libc::c_int;
pub type mbstate_t = __mbstate_t;
pub type wint_t = __wint_t;
extern "C" {
    pub fn btowc(arg1: libc::c_int) -> wint_t;
}
extern "C" {
    pub fn wctob(arg1: wint_t) -> libc::c_int;
}
extern "C" {
    pub fn mbrlen(arg1: *const libc::c_char, arg2: usize, arg3: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn mbrtowc(arg1: *mut wchar_t, arg2: *const libc::c_char, arg3: usize, arg4: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn mbsinit(arg1: *const mbstate_t) -> libc::c_int;
}
extern "C" {
    pub fn mbsrtowcs(arg1: *mut wchar_t, arg2: *mut *const libc::c_char, arg3: usize, arg4: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn wcrtomb(arg1: *mut libc::c_char, arg2: wchar_t, arg3: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn wcschr(arg1: *const wchar_t, arg2: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscmp(arg1: *const wchar_t, arg2: *const wchar_t) -> libc::c_int;
}
extern "C" {
    pub fn wcscoll(arg1: *const wchar_t, arg2: *const wchar_t) -> libc::c_int;
}
extern "C" {
    pub fn wcscspn(arg1: *const wchar_t, arg2: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcslen(arg1: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcsncat(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncmp(arg1: *const wchar_t, arg2: *const wchar_t, arg3: usize) -> libc::c_int;
}
extern "C" {
    pub fn wcsncpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcspbrk(arg1: *const wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrchr(arg1: *const wchar_t, arg2: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrtombs(arg1: *mut libc::c_char, arg2: *mut *const wchar_t, arg3: usize, arg4: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn wcsspn(arg1: *const wchar_t, arg2: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcsstr(arg1: *const wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstok(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: *mut *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsxfrm(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> usize;
}
extern "C" {
    pub fn wmemchr(arg1: *const wchar_t, arg2: wchar_t, arg3: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wmemcmp(arg1: *const wchar_t, arg2: *const wchar_t, arg3: usize) -> libc::c_int;
}
extern "C" {
    pub fn wmemcpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wmemmove(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wmemset(arg1: *mut wchar_t, arg2: wchar_t, arg3: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn swprintf(arg1: *mut wchar_t, arg2: usize, arg3: *const wchar_t, ...) -> libc::c_int;
}
extern "C" {
    pub fn vswprintf(arg1: *mut wchar_t, arg2: usize, arg3: *const wchar_t, arg4: *mut __va_list_tag) -> libc::c_int;
}
extern "C" {
    pub fn wcstold(arg1: *const wchar_t, arg2: *mut *mut wchar_t) -> u128;
}
extern "C" {
    pub fn wcstoll(arg1: *const wchar_t, arg2: *mut *mut wchar_t, arg3: libc::c_int) -> libc::c_longlong;
}
extern "C" {
    pub fn wcstoull(arg1: *const wchar_t, arg2: *mut *mut wchar_t, arg3: libc::c_int) -> libc::c_ulonglong;
}
extern "C" {
    pub fn wcswcs(arg1: *const wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
pub const SGX_SUCCESS: _status_t = 0;
pub const SGX_ERROR_UNEXPECTED: _status_t = 1;
pub const SGX_ERROR_INVALID_PARAMETER: _status_t = 2;
pub const SGX_ERROR_OUT_OF_MEMORY: _status_t = 3;
pub const SGX_ERROR_ENCLAVE_LOST: _status_t = 4;
pub const SGX_ERROR_INVALID_STATE: _status_t = 5;
pub const SGX_ERROR_FEATURE_NOT_SUPPORTED: _status_t = 8;
pub const SGX_PTHREAD_EXIT: _status_t = 9;
pub const SGX_ERROR_MEMORY_MAP_FAILURE: _status_t = 10;
pub const SGX_ERROR_INVALID_FUNCTION: _status_t = 4097;
pub const SGX_ERROR_OUT_OF_TCS: _status_t = 4099;
pub const SGX_ERROR_ENCLAVE_CRASHED: _status_t = 4102;
pub const SGX_ERROR_ECALL_NOT_ALLOWED: _status_t = 4103;
pub const SGX_ERROR_OCALL_NOT_ALLOWED: _status_t = 4104;
pub const SGX_ERROR_STACK_OVERRUN: _status_t = 4105;
pub const SGX_ERROR_UNDEFINED_SYMBOL: _status_t = 8192;
pub const SGX_ERROR_INVALID_ENCLAVE: _status_t = 8193;
pub const SGX_ERROR_INVALID_ENCLAVE_ID: _status_t = 8194;
pub const SGX_ERROR_INVALID_SIGNATURE: _status_t = 8195;
pub const SGX_ERROR_NDEBUG_ENCLAVE: _status_t = 8196;
pub const SGX_ERROR_OUT_OF_EPC: _status_t = 8197;
pub const SGX_ERROR_NO_DEVICE: _status_t = 8198;
pub const SGX_ERROR_MEMORY_MAP_CONFLICT: _status_t = 8199;
pub const SGX_ERROR_INVALID_METADATA: _status_t = 8201;
pub const SGX_ERROR_DEVICE_BUSY: _status_t = 8204;
pub const SGX_ERROR_INVALID_VERSION: _status_t = 8205;
pub const SGX_ERROR_MODE_INCOMPATIBLE: _status_t = 8206;
pub const SGX_ERROR_ENCLAVE_FILE_ACCESS: _status_t = 8207;
pub const SGX_ERROR_INVALID_MISC: _status_t = 8208;
pub const SGX_ERROR_INVALID_LAUNCH_TOKEN: _status_t = 8209;
pub const SGX_ERROR_MAC_MISMATCH: _status_t = 12289;
pub const SGX_ERROR_INVALID_ATTRIBUTE: _status_t = 12290;
pub const SGX_ERROR_INVALID_CPUSVN: _status_t = 12291;
pub const SGX_ERROR_INVALID_ISVSVN: _status_t = 12292;
pub const SGX_ERROR_INVALID_KEYNAME: _status_t = 12293;
pub const SGX_ERROR_SERVICE_UNAVAILABLE: _status_t = 16385;
pub const SGX_ERROR_SERVICE_TIMEOUT: _status_t = 16386;
pub const SGX_ERROR_AE_INVALID_EPIDBLOB: _status_t = 16387;
pub const SGX_ERROR_SERVICE_INVALID_PRIVILEGE: _status_t = 16388;
pub const SGX_ERROR_EPID_MEMBER_REVOKED: _status_t = 16389;
pub const SGX_ERROR_UPDATE_NEEDED: _status_t = 16390;
pub const SGX_ERROR_NETWORK_FAILURE: _status_t = 16391;
pub const SGX_ERROR_AE_SESSION_INVALID: _status_t = 16392;
pub const SGX_ERROR_BUSY: _status_t = 16394;
pub const SGX_ERROR_MC_NOT_FOUND: _status_t = 16396;
pub const SGX_ERROR_MC_NO_ACCESS_RIGHT: _status_t = 16397;
pub const SGX_ERROR_MC_USED_UP: _status_t = 16398;
pub const SGX_ERROR_MC_OVER_QUOTA: _status_t = 16399;
pub const SGX_ERROR_KDF_MISMATCH: _status_t = 16401;
pub const SGX_ERROR_UNRECOGNIZED_PLATFORM: _status_t = 16402;
pub const SGX_ERROR_UNSUPPORTED_CONFIG: _status_t = 16403;
pub const SGX_ERROR_NO_PRIVILEGE: _status_t = 20482;
pub const SGX_ERROR_PCL_ENCRYPTED: _status_t = 24577;
pub const SGX_ERROR_PCL_NOT_ENCRYPTED: _status_t = 24578;
pub const SGX_ERROR_PCL_MAC_MISMATCH: _status_t = 24579;
pub const SGX_ERROR_PCL_SHA_MISMATCH: _status_t = 24580;
pub const SGX_ERROR_PCL_GUID_MISMATCH: _status_t = 24581;
pub const SGX_ERROR_FILE_BAD_STATUS: _status_t = 28673;
pub const SGX_ERROR_FILE_NO_KEY_ID: _status_t = 28674;
pub const SGX_ERROR_FILE_NAME_MISMATCH: _status_t = 28675;
pub const SGX_ERROR_FILE_NOT_SGX_FILE: _status_t = 28676;
pub const SGX_ERROR_FILE_CANT_OPEN_RECOVERY_FILE: _status_t = 28677;
pub const SGX_ERROR_FILE_CANT_WRITE_RECOVERY_FILE: _status_t = 28678;
pub const SGX_ERROR_FILE_RECOVERY_NEEDED: _status_t = 28679;
pub const SGX_ERROR_FILE_FLUSH_FAILED: _status_t = 28680;
pub const SGX_ERROR_FILE_CLOSE_FAILED: _status_t = 28681;
pub const SGX_ERROR_UNSUPPORTED_ATT_KEY_ID: _status_t = 32769;
pub const SGX_ERROR_ATT_KEY_CERTIFICATION_FAILURE: _status_t = 32770;
pub const SGX_ERROR_ATT_KEY_UNINITIALIZED: _status_t = 32771;
pub const SGX_ERROR_INVALID_ATT_KEY_CERT_DATA: _status_t = 32772;
pub const SGX_ERROR_PLATFORM_CERT_UNAVAILABLE: _status_t = 32773;
pub const SGX_INTERNAL_ERROR_ENCLAVE_CREATE_INTERRUPTED: _status_t = 61441;
pub type _status_t = u32;
pub use self::_status_t as sgx_status_t;
pub type sgx_enclave_id_t = u64;
extern "C" {
    pub fn sgx_ocalloc(size: usize) -> *mut libc::c_void;
}
extern "C" {
    pub fn sgx_ocfree();
}
extern "C" {
    pub fn sgx_ecall(eid: sgx_enclave_id_t, index: libc::c_int, ocall_table: *const libc::c_void, ms: *mut libc::c_void) -> sgx_status_t;
}
extern "C" {
    pub fn sgx_ecall_switchless(
        eid: sgx_enclave_id_t,
        index: libc::c_int,
        ocall_table: *const libc::c_void,
        ms: *mut libc::c_void,
    ) -> sgx_status_t;
}
extern "C" {
    pub fn sgx_ocall(index: libc::c_uint, ms: *mut libc::c_void) -> sgx_status_t;
}
extern "C" {
    pub fn sgx_ocall_switchless(index: libc::c_uint, ms: *mut libc::c_void) -> sgx_status_t;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct _attributes_t {
    pub flags: u64,
    pub xfrm: u64,
}
#[test]
fn bindgen_test_layout__attributes_t() {
    assert_eq!(
        ::core::mem::size_of::<_attributes_t>(),
        16usize,
        concat!("Size of: ", stringify!(_attributes_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_attributes_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_attributes_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_attributes_t>())).flags as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_attributes_t), "::", stringify!(flags))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_attributes_t>())).xfrm as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_attributes_t), "::", stringify!(xfrm))
    );
}
pub type sgx_attributes_t = _attributes_t;
pub type sgx_misc_select_t = u32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct _sgx_misc_attribute_t {
    pub secs_attr: sgx_attributes_t,
    pub misc_select: sgx_misc_select_t,
}
#[test]
fn bindgen_test_layout__sgx_misc_attribute_t() {
    assert_eq!(
        ::core::mem::size_of::<_sgx_misc_attribute_t>(),
        24usize,
        concat!("Size of: ", stringify!(_sgx_misc_attribute_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_sgx_misc_attribute_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_sgx_misc_attribute_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_misc_attribute_t>())).secs_attr as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_sgx_misc_attribute_t), "::", stringify!(secs_attr))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_misc_attribute_t>())).misc_select as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_misc_attribute_t),
            "::",
            stringify!(misc_select)
        )
    );
}
pub type sgx_misc_attribute_t = _sgx_misc_attribute_t;
pub type sgx_key_128bit_t = [u8; 16usize];
pub type sgx_isv_svn_t = u16;
pub type sgx_config_svn_t = u16;
pub type sgx_config_id_t = [u8; 64usize];
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct _sgx_cpu_svn_t {
    pub svn: [u8; 16usize],
}
#[test]
fn bindgen_test_layout__sgx_cpu_svn_t() {
    assert_eq!(
        ::core::mem::size_of::<_sgx_cpu_svn_t>(),
        16usize,
        concat!("Size of: ", stringify!(_sgx_cpu_svn_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_sgx_cpu_svn_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_sgx_cpu_svn_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_cpu_svn_t>())).svn as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_sgx_cpu_svn_t), "::", stringify!(svn))
    );
}
pub type sgx_cpu_svn_t = _sgx_cpu_svn_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct _sgx_key_id_t {
    pub id: [u8; 32usize],
}
#[test]
fn bindgen_test_layout__sgx_key_id_t() {
    assert_eq!(
        ::core::mem::size_of::<_sgx_key_id_t>(),
        32usize,
        concat!("Size of: ", stringify!(_sgx_key_id_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_sgx_key_id_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_sgx_key_id_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_key_id_t>())).id as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_sgx_key_id_t), "::", stringify!(id))
    );
}
pub type sgx_key_id_t = _sgx_key_id_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _key_request_t {
    pub key_name: u16,
    pub key_policy: u16,
    pub isv_svn: sgx_isv_svn_t,
    pub reserved1: u16,
    pub cpu_svn: sgx_cpu_svn_t,
    pub attribute_mask: sgx_attributes_t,
    pub key_id: sgx_key_id_t,
    pub misc_mask: sgx_misc_select_t,
    pub config_svn: sgx_config_svn_t,
    pub reserved2: [u8; 434usize],
}
#[test]
fn bindgen_test_layout__key_request_t() {
    assert_eq!(
        ::core::mem::size_of::<_key_request_t>(),
        512usize,
        concat!("Size of: ", stringify!(_key_request_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_key_request_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_key_request_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_key_request_t>())).key_name as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_key_request_t), "::", stringify!(key_name))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_key_request_t>())).key_policy as *const _ as usize },
        2usize,
        concat!("Offset of field: ", stringify!(_key_request_t), "::", stringify!(key_policy))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_key_request_t>())).isv_svn as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(_key_request_t), "::", stringify!(isv_svn))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_key_request_t>())).reserved1 as *const _ as usize },
        6usize,
        concat!("Offset of field: ", stringify!(_key_request_t), "::", stringify!(reserved1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_key_request_t>())).cpu_svn as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_key_request_t), "::", stringify!(cpu_svn))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_key_request_t>())).attribute_mask as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_key_request_t), "::", stringify!(attribute_mask))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_key_request_t>())).key_id as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(_key_request_t), "::", stringify!(key_id))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_key_request_t>())).misc_mask as *const _ as usize },
        72usize,
        concat!("Offset of field: ", stringify!(_key_request_t), "::", stringify!(misc_mask))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_key_request_t>())).config_svn as *const _ as usize },
        76usize,
        concat!("Offset of field: ", stringify!(_key_request_t), "::", stringify!(config_svn))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_key_request_t>())).reserved2 as *const _ as usize },
        78usize,
        concat!("Offset of field: ", stringify!(_key_request_t), "::", stringify!(reserved2))
    );
}
impl Default for _key_request_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgx_key_request_t = _key_request_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct _sgx_measurement_t {
    pub m: [u8; 32usize],
}
#[test]
fn bindgen_test_layout__sgx_measurement_t() {
    assert_eq!(
        ::core::mem::size_of::<_sgx_measurement_t>(),
        32usize,
        concat!("Size of: ", stringify!(_sgx_measurement_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_sgx_measurement_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_sgx_measurement_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_measurement_t>())).m as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_sgx_measurement_t), "::", stringify!(m))
    );
}
pub type sgx_measurement_t = _sgx_measurement_t;
pub type sgx_mac_t = [u8; 16usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _sgx_report_data_t {
    pub d: [u8; 64usize],
}
#[test]
fn bindgen_test_layout__sgx_report_data_t() {
    assert_eq!(
        ::core::mem::size_of::<_sgx_report_data_t>(),
        64usize,
        concat!("Size of: ", stringify!(_sgx_report_data_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_sgx_report_data_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_sgx_report_data_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_report_data_t>())).d as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_sgx_report_data_t), "::", stringify!(d))
    );
}
impl Default for _sgx_report_data_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgx_report_data_t = _sgx_report_data_t;
pub type sgx_prod_id_t = u16;
pub type sgx_isvext_prod_id_t = [u8; 16usize];
pub type sgx_isvfamily_id_t = [u8; 16usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _target_info_t {
    pub mr_enclave: sgx_measurement_t,
    pub attributes: sgx_attributes_t,
    pub reserved1: [u8; 2usize],
    pub config_svn: sgx_config_svn_t,
    pub misc_select: sgx_misc_select_t,
    pub reserved2: [u8; 8usize],
    pub config_id: sgx_config_id_t,
    pub reserved3: [u8; 384usize],
}
#[test]
fn bindgen_test_layout__target_info_t() {
    assert_eq!(
        ::core::mem::size_of::<_target_info_t>(),
        512usize,
        concat!("Size of: ", stringify!(_target_info_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_target_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_target_info_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_target_info_t>())).mr_enclave as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_target_info_t), "::", stringify!(mr_enclave))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_target_info_t>())).attributes as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(_target_info_t), "::", stringify!(attributes))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_target_info_t>())).reserved1 as *const _ as usize },
        48usize,
        concat!("Offset of field: ", stringify!(_target_info_t), "::", stringify!(reserved1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_target_info_t>())).config_svn as *const _ as usize },
        50usize,
        concat!("Offset of field: ", stringify!(_target_info_t), "::", stringify!(config_svn))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_target_info_t>())).misc_select as *const _ as usize },
        52usize,
        concat!("Offset of field: ", stringify!(_target_info_t), "::", stringify!(misc_select))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_target_info_t>())).reserved2 as *const _ as usize },
        56usize,
        concat!("Offset of field: ", stringify!(_target_info_t), "::", stringify!(reserved2))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_target_info_t>())).config_id as *const _ as usize },
        64usize,
        concat!("Offset of field: ", stringify!(_target_info_t), "::", stringify!(config_id))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_target_info_t>())).reserved3 as *const _ as usize },
        128usize,
        concat!("Offset of field: ", stringify!(_target_info_t), "::", stringify!(reserved3))
    );
}
impl Default for _target_info_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgx_target_info_t = _target_info_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _report_body_t {
    pub cpu_svn: sgx_cpu_svn_t,
    pub misc_select: sgx_misc_select_t,
    pub reserved1: [u8; 12usize],
    pub isv_ext_prod_id: sgx_isvext_prod_id_t,
    pub attributes: sgx_attributes_t,
    pub mr_enclave: sgx_measurement_t,
    pub reserved2: [u8; 32usize],
    pub mr_signer: sgx_measurement_t,
    pub reserved3: [u8; 32usize],
    pub config_id: sgx_config_id_t,
    pub isv_prod_id: sgx_prod_id_t,
    pub isv_svn: sgx_isv_svn_t,
    pub config_svn: sgx_config_svn_t,
    pub reserved4: [u8; 42usize],
    pub isv_family_id: sgx_isvfamily_id_t,
    pub report_data: sgx_report_data_t,
}
#[test]
fn bindgen_test_layout__report_body_t() {
    assert_eq!(
        ::core::mem::size_of::<_report_body_t>(),
        384usize,
        concat!("Size of: ", stringify!(_report_body_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_report_body_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_report_body_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).cpu_svn as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_report_body_t), "::", stringify!(cpu_svn))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).misc_select as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_report_body_t), "::", stringify!(misc_select))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).reserved1 as *const _ as usize },
        20usize,
        concat!("Offset of field: ", stringify!(_report_body_t), "::", stringify!(reserved1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).isv_ext_prod_id as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(_report_body_t), "::", stringify!(isv_ext_prod_id))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).attributes as *const _ as usize },
        48usize,
        concat!("Offset of field: ", stringify!(_report_body_t), "::", stringify!(attributes))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).mr_enclave as *const _ as usize },
        64usize,
        concat!("Offset of field: ", stringify!(_report_body_t), "::", stringify!(mr_enclave))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).reserved2 as *const _ as usize },
        96usize,
        concat!("Offset of field: ", stringify!(_report_body_t), "::", stringify!(reserved2))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).mr_signer as *const _ as usize },
        128usize,
        concat!("Offset of field: ", stringify!(_report_body_t), "::", stringify!(mr_signer))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).reserved3 as *const _ as usize },
        160usize,
        concat!("Offset of field: ", stringify!(_report_body_t), "::", stringify!(reserved3))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).config_id as *const _ as usize },
        192usize,
        concat!("Offset of field: ", stringify!(_report_body_t), "::", stringify!(config_id))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).isv_prod_id as *const _ as usize },
        256usize,
        concat!("Offset of field: ", stringify!(_report_body_t), "::", stringify!(isv_prod_id))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).isv_svn as *const _ as usize },
        258usize,
        concat!("Offset of field: ", stringify!(_report_body_t), "::", stringify!(isv_svn))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).config_svn as *const _ as usize },
        260usize,
        concat!("Offset of field: ", stringify!(_report_body_t), "::", stringify!(config_svn))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).reserved4 as *const _ as usize },
        262usize,
        concat!("Offset of field: ", stringify!(_report_body_t), "::", stringify!(reserved4))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).isv_family_id as *const _ as usize },
        304usize,
        concat!("Offset of field: ", stringify!(_report_body_t), "::", stringify!(isv_family_id))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).report_data as *const _ as usize },
        320usize,
        concat!("Offset of field: ", stringify!(_report_body_t), "::", stringify!(report_data))
    );
}
impl Default for _report_body_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgx_report_body_t = _report_body_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _report_t {
    pub body: sgx_report_body_t,
    pub key_id: sgx_key_id_t,
    pub mac: sgx_mac_t,
}
#[test]
fn bindgen_test_layout__report_t() {
    assert_eq!(
        ::core::mem::size_of::<_report_t>(),
        432usize,
        concat!("Size of: ", stringify!(_report_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_report_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_report_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_t>())).body as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_report_t), "::", stringify!(body))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_t>())).key_id as *const _ as usize },
        384usize,
        concat!("Offset of field: ", stringify!(_report_t), "::", stringify!(key_id))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_t>())).mac as *const _ as usize },
        416usize,
        concat!("Offset of field: ", stringify!(_report_t), "::", stringify!(mac))
    );
}
impl Default for _report_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgx_report_t = _report_t;
pub type sgx_epid_group_id_t = [u8; 4usize];
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct _spid_t {
    pub id: [u8; 16usize],
}
#[test]
fn bindgen_test_layout__spid_t() {
    assert_eq!(
        ::core::mem::size_of::<_spid_t>(),
        16usize,
        concat!("Size of: ", stringify!(_spid_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_spid_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_spid_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_spid_t>())).id as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_spid_t), "::", stringify!(id))
    );
}
pub type sgx_spid_t = _spid_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct _basename_t {
    pub name: [u8; 32usize],
}
#[test]
fn bindgen_test_layout__basename_t() {
    assert_eq!(
        ::core::mem::size_of::<_basename_t>(),
        32usize,
        concat!("Size of: ", stringify!(_basename_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_basename_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_basename_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_basename_t>())).name as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_basename_t), "::", stringify!(name))
    );
}
pub type sgx_basename_t = _basename_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct _quote_nonce {
    pub rand: [u8; 16usize],
}
#[test]
fn bindgen_test_layout__quote_nonce() {
    assert_eq!(
        ::core::mem::size_of::<_quote_nonce>(),
        16usize,
        concat!("Size of: ", stringify!(_quote_nonce))
    );
    assert_eq!(
        ::core::mem::align_of::<_quote_nonce>(),
        1usize,
        concat!("Alignment of ", stringify!(_quote_nonce))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_quote_nonce>())).rand as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_quote_nonce), "::", stringify!(rand))
    );
}
pub type sgx_quote_nonce_t = _quote_nonce;
pub const SGX_UNLINKABLE_SIGNATURE: sgx_quote_sign_type_t = 0;
pub const SGX_LINKABLE_SIGNATURE: sgx_quote_sign_type_t = 1;
pub type sgx_quote_sign_type_t = u32;
#[repr(C, packed)]
pub struct _quote_t {
    pub version: u16,
    pub sign_type: u16,
    pub epid_group_id: sgx_epid_group_id_t,
    pub qe_svn: sgx_isv_svn_t,
    pub pce_svn: sgx_isv_svn_t,
    pub xeid: u32,
    pub basename: sgx_basename_t,
    pub report_body: sgx_report_body_t,
    pub signature_len: u32,
    pub signature: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout__quote_t() {
    assert_eq!(
        ::core::mem::size_of::<_quote_t>(),
        436usize,
        concat!("Size of: ", stringify!(_quote_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_quote_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_quote_t))
    );
}
impl Default for _quote_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgx_quote_t = _quote_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _platform_info {
    pub platform_info: [u8; 101usize],
}
#[test]
fn bindgen_test_layout__platform_info() {
    assert_eq!(
        ::core::mem::size_of::<_platform_info>(),
        101usize,
        concat!("Size of: ", stringify!(_platform_info))
    );
    assert_eq!(
        ::core::mem::align_of::<_platform_info>(),
        1usize,
        concat!("Alignment of ", stringify!(_platform_info))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_platform_info>())).platform_info as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_platform_info), "::", stringify!(platform_info))
    );
}
impl Default for _platform_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgx_platform_info_t = _platform_info;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct _update_info_bit {
    pub ucodeUpdate: libc::c_int,
    pub csmeFwUpdate: libc::c_int,
    pub pswUpdate: libc::c_int,
}
#[test]
fn bindgen_test_layout__update_info_bit() {
    assert_eq!(
        ::core::mem::size_of::<_update_info_bit>(),
        12usize,
        concat!("Size of: ", stringify!(_update_info_bit))
    );
    assert_eq!(
        ::core::mem::align_of::<_update_info_bit>(),
        1usize,
        concat!("Alignment of ", stringify!(_update_info_bit))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_update_info_bit>())).ucodeUpdate as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_update_info_bit), "::", stringify!(ucodeUpdate))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_update_info_bit>())).csmeFwUpdate as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(_update_info_bit), "::", stringify!(csmeFwUpdate))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_update_info_bit>())).pswUpdate as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_update_info_bit), "::", stringify!(pswUpdate))
    );
}
pub type sgx_update_info_bit_t = _update_info_bit;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _att_key_id_t {
    pub att_key_id: [u8; 256usize],
}
#[test]
fn bindgen_test_layout__att_key_id_t() {
    assert_eq!(
        ::core::mem::size_of::<_att_key_id_t>(),
        256usize,
        concat!("Size of: ", stringify!(_att_key_id_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_att_key_id_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_att_key_id_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_att_key_id_t>())).att_key_id as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_att_key_id_t), "::", stringify!(att_key_id))
    );
}
impl Default for _att_key_id_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgx_att_key_id_t = _att_key_id_t;
#[doc = " Describes a single attestation key.  Contains both QE identity and the attestation algorithm ID."]
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct _sgx_ql_att_key_id_t {
    #[doc = "< Structure ID"]
    pub id: u16,
    #[doc = "< Structure version"]
    pub version: u16,
    #[doc = "< Number of valid bytes in MRSIGNER."]
    pub mrsigner_length: u16,
    #[doc = "< SHA256 or SHA384 hash of the Public key that signed the QE."]
    #[doc = "< The lower bytes contain MRSIGNER.  Bytes beyond mrsigner_length '0'"]
    pub mrsigner: [u8; 48usize],
    #[doc = "< Legacy Product ID of the QE"]
    pub prod_id: u32,
    #[doc = "< Extended Product ID or the QE. All 0's for legacy format enclaves."]
    pub extended_prod_id: [u8; 16usize],
    #[doc = "< Config ID of the QE."]
    pub config_id: [u8; 64usize],
    #[doc = "< Family ID of the QE."]
    pub family_id: [u8; 16usize],
    #[doc = "< Identity of the attestation key algorithm."]
    pub algorithm_id: u32,
}
#[test]
fn bindgen_test_layout__sgx_ql_att_key_id_t() {
    assert_eq!(
        ::core::mem::size_of::<_sgx_ql_att_key_id_t>(),
        158usize,
        concat!("Size of: ", stringify!(_sgx_ql_att_key_id_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_sgx_ql_att_key_id_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_sgx_ql_att_key_id_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_ql_att_key_id_t>())).id as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_sgx_ql_att_key_id_t), "::", stringify!(id))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_ql_att_key_id_t>())).version as *const _ as usize },
        2usize,
        concat!("Offset of field: ", stringify!(_sgx_ql_att_key_id_t), "::", stringify!(version))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_ql_att_key_id_t>())).mrsigner_length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_ql_att_key_id_t),
            "::",
            stringify!(mrsigner_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_ql_att_key_id_t>())).mrsigner as *const _ as usize },
        6usize,
        concat!("Offset of field: ", stringify!(_sgx_ql_att_key_id_t), "::", stringify!(mrsigner))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_ql_att_key_id_t>())).prod_id as *const _ as usize },
        54usize,
        concat!("Offset of field: ", stringify!(_sgx_ql_att_key_id_t), "::", stringify!(prod_id))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_ql_att_key_id_t>())).extended_prod_id as *const _ as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_ql_att_key_id_t),
            "::",
            stringify!(extended_prod_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_ql_att_key_id_t>())).config_id as *const _ as usize },
        74usize,
        concat!("Offset of field: ", stringify!(_sgx_ql_att_key_id_t), "::", stringify!(config_id))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_ql_att_key_id_t>())).family_id as *const _ as usize },
        138usize,
        concat!("Offset of field: ", stringify!(_sgx_ql_att_key_id_t), "::", stringify!(family_id))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_ql_att_key_id_t>())).algorithm_id as *const _ as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_ql_att_key_id_t),
            "::",
            stringify!(algorithm_id)
        )
    );
}
impl Default for _sgx_ql_att_key_id_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgx_ql_att_key_id_t = _sgx_ql_att_key_id_t;
#[doc = " Describes an extended attestation key.  Contains sgx_ql_att_key_id_t, spid and quote_type"]
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct _sgx_att_key_id_ext_t {
    pub base: sgx_ql_att_key_id_t,
    #[doc = "< Service Provider ID, should be 0s for ECDSA quote"]
    pub spid: [u8; 16usize],
    #[doc = "< For non-EPID quote, it should be 0"]
    #[doc = "< For EPID quote, it equals to sgx_quote_sign_type_t"]
    pub att_key_type: u16,
    #[doc = "< It should have the same size of sgx_att_key_id_t"]
    pub reserved: [u8; 80usize],
}
#[test]
fn bindgen_test_layout__sgx_att_key_id_ext_t() {
    assert_eq!(
        ::core::mem::size_of::<_sgx_att_key_id_ext_t>(),
        256usize,
        concat!("Size of: ", stringify!(_sgx_att_key_id_ext_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_sgx_att_key_id_ext_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_sgx_att_key_id_ext_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_att_key_id_ext_t>())).base as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_sgx_att_key_id_ext_t), "::", stringify!(base))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_att_key_id_ext_t>())).spid as *const _ as usize },
        158usize,
        concat!("Offset of field: ", stringify!(_sgx_att_key_id_ext_t), "::", stringify!(spid))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_att_key_id_ext_t>())).att_key_type as *const _ as usize },
        174usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_att_key_id_ext_t),
            "::",
            stringify!(att_key_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_att_key_id_ext_t>())).reserved as *const _ as usize },
        176usize,
        concat!("Offset of field: ", stringify!(_sgx_att_key_id_ext_t), "::", stringify!(reserved))
    );
}
impl Default for _sgx_att_key_id_ext_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgx_att_key_id_ext_t = _sgx_att_key_id_ext_t;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct _qe_report_info_t {
    pub nonce: sgx_quote_nonce_t,
    pub app_enclave_target_info: sgx_target_info_t,
    pub qe_report: sgx_report_t,
}
#[test]
fn bindgen_test_layout__qe_report_info_t() {
    assert_eq!(
        ::core::mem::size_of::<_qe_report_info_t>(),
        960usize,
        concat!("Size of: ", stringify!(_qe_report_info_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_qe_report_info_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_qe_report_info_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_qe_report_info_t>())).nonce as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_qe_report_info_t), "::", stringify!(nonce))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_qe_report_info_t>())).app_enclave_target_info as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_qe_report_info_t),
            "::",
            stringify!(app_enclave_target_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_qe_report_info_t>())).qe_report as *const _ as usize },
        528usize,
        concat!("Offset of field: ", stringify!(_qe_report_info_t), "::", stringify!(qe_report))
    );
}
impl Default for _qe_report_info_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgx_qe_report_info_t = _qe_report_info_t;
pub type va_list = __va_list;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct div_t {
    pub quot: libc::c_int,
    pub rem: libc::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(::core::mem::size_of::<div_t>(), 8usize, concat!("Size of: ", stringify!(div_t)));
    assert_eq!(
        ::core::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(div_t), "::", stringify!(quot))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(div_t), "::", stringify!(rem))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct ldiv_t {
    pub quot: libc::c_long,
    pub rem: libc::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(::core::mem::size_of::<ldiv_t>(), 16usize, concat!("Size of: ", stringify!(ldiv_t)));
    assert_eq!(
        ::core::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ldiv_t), "::", stringify!(quot))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ldiv_t), "::", stringify!(rem))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct lldiv_t {
    pub quot: libc::c_longlong,
    pub rem: libc::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::core::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::core::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(lldiv_t), "::", stringify!(quot))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(lldiv_t), "::", stringify!(rem))
    );
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(arg1: ::core::option::Option<unsafe extern "C" fn()>) -> libc::c_int;
}
extern "C" {
    pub fn abs(arg1: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn atof(arg1: *const libc::c_char) -> f64;
}
extern "C" {
    pub fn atoi(arg1: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn atol(arg1: *const libc::c_char) -> libc::c_long;
}
extern "C" {
    pub fn bsearch(
        arg1: *const libc::c_void,
        arg2: *const libc::c_void,
        arg3: usize,
        arg4: usize,
        arg5: ::core::option::Option<unsafe extern "C" fn(arg1: *const libc::c_void, arg2: *const libc::c_void) -> libc::c_int>,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn calloc(arg1: usize, arg2: usize) -> *mut libc::c_void;
}
extern "C" {
    pub fn div(arg1: libc::c_int, arg2: libc::c_int) -> div_t;
}
extern "C" {
    pub fn free(arg1: *mut libc::c_void);
}
extern "C" {
    pub fn labs(arg1: libc::c_long) -> libc::c_long;
}
extern "C" {
    pub fn ldiv(arg1: libc::c_long, arg2: libc::c_long) -> ldiv_t;
}
extern "C" {
    pub fn malloc(arg1: usize) -> *mut libc::c_void;
}
extern "C" {
    pub fn memalign(arg1: usize, arg2: usize) -> *mut libc::c_void;
}
extern "C" {
    pub fn qsort(
        arg1: *mut libc::c_void,
        arg2: usize,
        arg3: usize,
        arg4: ::core::option::Option<unsafe extern "C" fn(arg1: *const libc::c_void, arg2: *const libc::c_void) -> libc::c_int>,
    );
}
extern "C" {
    pub fn realloc(arg1: *mut libc::c_void, arg2: usize) -> *mut libc::c_void;
}
extern "C" {
    pub fn strtod(arg1: *const libc::c_char, arg2: *mut *mut libc::c_char) -> f64;
}
extern "C" {
    pub fn strtol(arg1: *const libc::c_char, arg2: *mut *mut libc::c_char, arg3: libc::c_int) -> libc::c_long;
}
extern "C" {
    pub fn strtof(arg1: *const libc::c_char, arg2: *mut *mut libc::c_char) -> f32;
}
extern "C" {
    pub fn atoll(arg1: *const libc::c_char) -> libc::c_longlong;
}
extern "C" {
    pub fn llabs(arg1: libc::c_longlong) -> libc::c_longlong;
}
extern "C" {
    pub fn lldiv(arg1: libc::c_longlong, arg2: libc::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn strtoll(arg1: *const libc::c_char, arg2: *mut *mut libc::c_char, arg3: libc::c_int) -> libc::c_longlong;
}
extern "C" {
    pub fn strtoul(arg1: *const libc::c_char, arg2: *mut *mut libc::c_char, arg3: libc::c_int) -> libc::c_ulong;
}
extern "C" {
    pub fn strtold(arg1: *const libc::c_char, arg2: *mut *mut libc::c_char) -> u128;
}
extern "C" {
    pub fn strtoull(arg1: *const libc::c_char, arg2: *mut *mut libc::c_char, arg3: libc::c_int) -> libc::c_ulonglong;
}
extern "C" {
    pub fn mblen(arg1: *const libc::c_char, arg2: usize) -> libc::c_int;
}
extern "C" {
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const libc::c_char, arg3: usize) -> usize;
}
extern "C" {
    pub fn wctomb(arg1: *mut libc::c_char, arg2: wchar_t) -> libc::c_int;
}
extern "C" {
    pub fn mbtowc(arg1: *mut wchar_t, arg2: *const libc::c_char, arg3: usize) -> libc::c_int;
}
extern "C" {
    pub fn wcstombs(arg1: *mut libc::c_char, arg2: *const wchar_t, arg3: usize) -> usize;
}
extern "C" {
    pub fn alloca(arg1: usize) -> *mut libc::c_void;
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct _sgx_kss_config_t {
    pub config_id: sgx_config_id_t,
    pub config_svn: sgx_config_svn_t,
}
#[test]
fn bindgen_test_layout__sgx_kss_config_t() {
    assert_eq!(
        ::core::mem::size_of::<_sgx_kss_config_t>(),
        66usize,
        concat!("Size of: ", stringify!(_sgx_kss_config_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_sgx_kss_config_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_sgx_kss_config_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_kss_config_t>())).config_id as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_sgx_kss_config_t), "::", stringify!(config_id))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_kss_config_t>())).config_svn as *const _ as usize },
        64usize,
        concat!("Offset of field: ", stringify!(_sgx_kss_config_t), "::", stringify!(config_svn))
    );
}
impl Default for _sgx_kss_config_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgx_kss_config_t = _sgx_kss_config_t;
pub type sgx_launch_token_t = [u8; 1024usize];
extern "C" {
    pub fn sgx_create_enclave(
        file_name: *const libc::c_char,
        debug: libc::c_int,
        launch_token: *mut sgx_launch_token_t,
        launch_token_updated: *mut libc::c_int,
        enclave_id: *mut sgx_enclave_id_t,
        misc_attr: *mut sgx_misc_attribute_t,
    ) -> sgx_status_t;
}
extern "C" {
    pub fn sgx_create_enclave_ex(
        file_name: *const libc::c_char,
        debug: libc::c_int,
        launch_token: *mut sgx_launch_token_t,
        launch_token_updated: *mut libc::c_int,
        enclave_id: *mut sgx_enclave_id_t,
        misc_attr: *mut sgx_misc_attribute_t,
        ex_features: u32,
        ex_features_p: *mut *const libc::c_void,
    ) -> sgx_status_t;
}
extern "C" {
    pub fn sgx_create_enclave_from_buffer_ex(
        buffer: *mut u8,
        buffer_size: usize,
        debug: libc::c_int,
        enclave_id: *mut sgx_enclave_id_t,
        misc_attr: *mut sgx_misc_attribute_t,
        ex_features: u32,
        ex_features_p: *mut *const libc::c_void,
    ) -> sgx_status_t;
}
extern "C" {
    pub fn sgx_create_encrypted_enclave(
        file_name: *const libc::c_char,
        debug: libc::c_int,
        launch_token: *mut sgx_launch_token_t,
        launch_token_updated: *mut libc::c_int,
        enclave_id: *mut sgx_enclave_id_t,
        misc_attr: *mut sgx_misc_attribute_t,
        sealed_key: *mut u8,
    ) -> sgx_status_t;
}
extern "C" {
    pub fn sgx_destroy_enclave(enclave_id: sgx_enclave_id_t) -> sgx_status_t;
}
extern "C" {
    pub fn sgx_get_target_info(enclave_id: sgx_enclave_id_t, target_info: *mut sgx_target_info_t) -> sgx_status_t;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct sgxsd_aes_gcm_mac {
    pub data: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_sgxsd_aes_gcm_mac() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_aes_gcm_mac>(),
        16usize,
        concat!("Size of: ", stringify!(sgxsd_aes_gcm_mac))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_aes_gcm_mac>(),
        1usize,
        concat!("Alignment of ", stringify!(sgxsd_aes_gcm_mac))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_aes_gcm_mac>())).data as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sgxsd_aes_gcm_mac), "::", stringify!(data))
    );
}
pub type sgxsd_aes_gcm_mac_t = sgxsd_aes_gcm_mac;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct sgxsd_aes_gcm_iv {
    pub data: [u8; 12usize],
}
#[test]
fn bindgen_test_layout_sgxsd_aes_gcm_iv() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_aes_gcm_iv>(),
        12usize,
        concat!("Size of: ", stringify!(sgxsd_aes_gcm_iv))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_aes_gcm_iv>(),
        1usize,
        concat!("Alignment of ", stringify!(sgxsd_aes_gcm_iv))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_aes_gcm_iv>())).data as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sgxsd_aes_gcm_iv), "::", stringify!(data))
    );
}
pub type sgxsd_aes_gcm_iv_t = sgxsd_aes_gcm_iv;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct sgxsd_aes_gcm_key {
    pub data: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_sgxsd_aes_gcm_key() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_aes_gcm_key>(),
        32usize,
        concat!("Size of: ", stringify!(sgxsd_aes_gcm_key))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_aes_gcm_key>(),
        1usize,
        concat!("Alignment of ", stringify!(sgxsd_aes_gcm_key))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_aes_gcm_key>())).data as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sgxsd_aes_gcm_key), "::", stringify!(data))
    );
}
pub type sgxsd_aes_gcm_key_t = sgxsd_aes_gcm_key;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct sgxsd_curve25519_public_key {
    pub x: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_sgxsd_curve25519_public_key() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_curve25519_public_key>(),
        32usize,
        concat!("Size of: ", stringify!(sgxsd_curve25519_public_key))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_curve25519_public_key>(),
        1usize,
        concat!("Alignment of ", stringify!(sgxsd_curve25519_public_key))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_curve25519_public_key>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sgxsd_curve25519_public_key), "::", stringify!(x))
    );
}
pub type sgxsd_curve25519_public_key_t = sgxsd_curve25519_public_key;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct sgxsd_request_negotiation_request {
    pub client_pubkey: sgxsd_curve25519_public_key_t,
}
#[test]
fn bindgen_test_layout_sgxsd_request_negotiation_request() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_request_negotiation_request>(),
        32usize,
        concat!("Size of: ", stringify!(sgxsd_request_negotiation_request))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_request_negotiation_request>(),
        1usize,
        concat!("Alignment of ", stringify!(sgxsd_request_negotiation_request))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_request_negotiation_request>())).client_pubkey as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_request_negotiation_request),
            "::",
            stringify!(client_pubkey)
        )
    );
}
pub type sgxsd_request_negotiation_request_t = sgxsd_request_negotiation_request;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct sgxsd_pending_request_id {
    pub data: [u8; 8usize],
    pub iv: sgxsd_aes_gcm_iv_t,
    pub mac: sgxsd_aes_gcm_mac_t,
}
#[test]
fn bindgen_test_layout_sgxsd_pending_request_id() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_pending_request_id>(),
        36usize,
        concat!("Size of: ", stringify!(sgxsd_pending_request_id))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_pending_request_id>(),
        1usize,
        concat!("Alignment of ", stringify!(sgxsd_pending_request_id))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_pending_request_id>())).data as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sgxsd_pending_request_id), "::", stringify!(data))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_pending_request_id>())).iv as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(sgxsd_pending_request_id), "::", stringify!(iv))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_pending_request_id>())).mac as *const _ as usize },
        20usize,
        concat!("Offset of field: ", stringify!(sgxsd_pending_request_id), "::", stringify!(mac))
    );
}
pub type sgxsd_pending_request_id_t = sgxsd_pending_request_id;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sgxsd_request_negotiation_response {
    pub server_static_pubkey: sgxsd_curve25519_public_key_t,
    pub server_ephemeral_pubkey: sgxsd_curve25519_public_key_t,
    pub encrypted_pending_request_id: sgxsd_request_negotiation_response__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sgxsd_request_negotiation_response__bindgen_ty_1 {
    pub data: [u8; 36usize],
    pub iv: sgxsd_aes_gcm_iv_t,
    pub mac: sgxsd_aes_gcm_mac_t,
}
#[test]
fn bindgen_test_layout_sgxsd_request_negotiation_response__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_request_negotiation_response__bindgen_ty_1>(),
        64usize,
        concat!("Size of: ", stringify!(sgxsd_request_negotiation_response__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_request_negotiation_response__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(sgxsd_request_negotiation_response__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_request_negotiation_response__bindgen_ty_1>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_request_negotiation_response__bindgen_ty_1),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_request_negotiation_response__bindgen_ty_1>())).iv as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_request_negotiation_response__bindgen_ty_1),
            "::",
            stringify!(iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_request_negotiation_response__bindgen_ty_1>())).mac as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_request_negotiation_response__bindgen_ty_1),
            "::",
            stringify!(mac)
        )
    );
}
impl Default for sgxsd_request_negotiation_response__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_sgxsd_request_negotiation_response() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_request_negotiation_response>(),
        128usize,
        concat!("Size of: ", stringify!(sgxsd_request_negotiation_response))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_request_negotiation_response>(),
        1usize,
        concat!("Alignment of ", stringify!(sgxsd_request_negotiation_response))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_request_negotiation_response>())).server_static_pubkey as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_request_negotiation_response),
            "::",
            stringify!(server_static_pubkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_request_negotiation_response>())).server_ephemeral_pubkey as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_request_negotiation_response),
            "::",
            stringify!(server_ephemeral_pubkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_request_negotiation_response>())).encrypted_pending_request_id as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_request_negotiation_response),
            "::",
            stringify!(encrypted_pending_request_id)
        )
    );
}
impl Default for sgxsd_request_negotiation_response {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgxsd_request_negotiation_response_t = sgxsd_request_negotiation_response;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sgxsd_msg_tag {
    pub __bindgen_anon_1: sgxsd_msg_tag__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sgxsd_msg_tag__bindgen_ty_1 {
    pub p_tag: *mut libc::c_void,
    pub tag: u64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_sgxsd_msg_tag__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_msg_tag__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(sgxsd_msg_tag__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_msg_tag__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sgxsd_msg_tag__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_msg_tag__bindgen_ty_1>())).p_tag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_msg_tag__bindgen_ty_1),
            "::",
            stringify!(p_tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_msg_tag__bindgen_ty_1>())).tag as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sgxsd_msg_tag__bindgen_ty_1), "::", stringify!(tag))
    );
}
impl Default for sgxsd_msg_tag__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_sgxsd_msg_tag() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_msg_tag>(),
        8usize,
        concat!("Size of: ", stringify!(sgxsd_msg_tag))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_msg_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(sgxsd_msg_tag))
    );
}
impl Default for sgxsd_msg_tag {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgxsd_msg_tag_t = sgxsd_msg_tag;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct sgxsd_msg_header {
    pub iv: sgxsd_aes_gcm_iv_t,
    pub mac: sgxsd_aes_gcm_mac_t,
    pub pending_request_id: sgxsd_pending_request_id_t,
}
#[test]
fn bindgen_test_layout_sgxsd_msg_header() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_msg_header>(),
        64usize,
        concat!("Size of: ", stringify!(sgxsd_msg_header))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_msg_header>(),
        1usize,
        concat!("Alignment of ", stringify!(sgxsd_msg_header))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_msg_header>())).iv as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sgxsd_msg_header), "::", stringify!(iv))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_msg_header>())).mac as *const _ as usize },
        12usize,
        concat!("Offset of field: ", stringify!(sgxsd_msg_header), "::", stringify!(mac))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_msg_header>())).pending_request_id as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_msg_header),
            "::",
            stringify!(pending_request_id)
        )
    );
}
pub type sgxsd_msg_header_t = sgxsd_msg_header;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct sgxsd_node_init_args {
    pub pending_requests_table_order: u8,
}
#[test]
fn bindgen_test_layout_sgxsd_node_init_args() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_node_init_args>(),
        1usize,
        concat!("Size of: ", stringify!(sgxsd_node_init_args))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_node_init_args>(),
        1usize,
        concat!("Alignment of ", stringify!(sgxsd_node_init_args))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_node_init_args>())).pending_requests_table_order as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_node_init_args),
            "::",
            stringify!(pending_requests_table_order)
        )
    );
}
pub type sgxsd_node_init_args_t = sgxsd_node_init_args;
pub type sgxsd_server_state_handle_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct sgxsd_status {
    pub ok: bool,
    pub name: *const libc::c_char,
    pub code: i64,
}
#[test]
fn bindgen_test_layout_sgxsd_status() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_status>(),
        24usize,
        concat!("Size of: ", stringify!(sgxsd_status))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_status>(),
        8usize,
        concat!("Alignment of ", stringify!(sgxsd_status))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_status>())).ok as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sgxsd_status), "::", stringify!(ok))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_status>())).name as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(sgxsd_status), "::", stringify!(name))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_status>())).code as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(sgxsd_status), "::", stringify!(code))
    );
}
impl Default for sgxsd_status {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgxsd_status_t = sgxsd_status;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sgxsd_enclave {
    pub id: sgx_enclave_id_t,
    pub __bindgen_anon_1: sgxsd_enclave__bindgen_ty_1,
    pub launch_token: sgx_launch_token_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sgxsd_enclave__bindgen_ty_1 {
    pub gid: sgx_epid_group_id_t,
    pub gid32: u32,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_sgxsd_enclave__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_enclave__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(sgxsd_enclave__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_enclave__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(sgxsd_enclave__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_enclave__bindgen_ty_1>())).gid as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sgxsd_enclave__bindgen_ty_1), "::", stringify!(gid))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_enclave__bindgen_ty_1>())).gid32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_enclave__bindgen_ty_1),
            "::",
            stringify!(gid32)
        )
    );
}
impl Default for sgxsd_enclave__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_sgxsd_enclave() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_enclave>(),
        1040usize,
        concat!("Size of: ", stringify!(sgxsd_enclave))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_enclave>(),
        8usize,
        concat!("Alignment of ", stringify!(sgxsd_enclave))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_enclave>())).id as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sgxsd_enclave), "::", stringify!(id))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_enclave>())).launch_token as *const _ as usize },
        12usize,
        concat!("Offset of field: ", stringify!(sgxsd_enclave), "::", stringify!(launch_token))
    );
}
impl Default for sgxsd_enclave {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgxsd_enclave_t = sgxsd_enclave;
pub type sgxsd_start_callback_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: sgxsd_enclave_t, arg2: *mut __va_list_tag) -> sgxsd_status_t>;
extern "C" {
    pub fn sgxsd_start(
        enclave_path: *const libc::c_char,
        debug: bool,
        p_launch_token: *const sgx_launch_token_t,
        p_node_init_args: *const sgxsd_node_init_args_t,
        p_callback: sgxsd_start_callback_t,
        ...
    ) -> sgxsd_status_t;
}
extern "C" {
    pub fn sgxsd_get_next_quote(
        enclave_id: sgx_enclave_id_t,
        spid: sgx_spid_t,
        p_sig_rl: *const u8,
        sig_rl_size: u32,
        p_quote: *mut sgx_quote_t,
        quote_size: u32,
    ) -> sgxsd_status_t;
}
pub const SGXSD_ERROR_PENDING_REQUEST_NOT_FOUND: sgxsd_status_code = 65537;
pub type sgxsd_status_code = u32;
pub use self::sgxsd_status_code as sgxsd_status_code_t;
extern "C" {
    pub fn kbupd_enclave_recv_untrusted_msg(data: *const u8, data_size: usize);
}
extern "C" {
    pub fn sgxsd_enclave_node_init(p_args: *const sgxsd_node_init_args_t) -> sgx_status_t;
}
extern "C" {
    pub fn sgxsd_enclave_get_next_report(qe_target_info: sgx_target_info_t, p_report: *mut sgx_report_t) -> sgx_status_t;
}
extern "C" {
    pub fn sgxsd_enclave_set_current_quote() -> sgx_status_t;
}
extern "C" {
    pub fn sgxsd_enclave_negotiate_request(
        p_request: *const sgxsd_request_negotiation_request_t,
        p_response: *mut sgxsd_request_negotiation_response_t,
    ) -> sgx_status_t;
}
extern "C" {
    pub fn sgxsd_enclave_server_start(p_args: *const sgxsd_server_init_args_t, state_handle: sgxsd_server_state_handle_t) -> sgx_status_t;
}
extern "C" {
    pub fn sgxsd_enclave_server_call(
        p_args: *const sgxsd_server_handle_call_args_t,
        msg_header: *const sgxsd_msg_header_t,
        msg_data: *mut u8,
        msg_size: usize,
        msg_tag: sgxsd_msg_tag_t,
        state_handle: sgxsd_server_state_handle_t,
    ) -> sgx_status_t;
}
extern "C" {
    pub fn sgxsd_enclave_server_stop(
        p_args: *const sgxsd_server_terminate_args_t,
        state_handle: sgxsd_server_state_handle_t,
    ) -> sgx_status_t;
}
extern "C" {
    pub fn kbupd_enclave_ocall_recv_enclave_msg(data: *const u8, data_size: usize) -> sgx_status_t;
}
extern "C" {
    pub fn kbupd_enclave_ocall_alloc(retval: *mut *mut libc::c_void, size: *mut usize) -> sgx_status_t;
}
extern "C" {
    pub fn kbupd_enclave_ocall_panic(msg: *const u8, msg_size: usize) -> sgx_status_t;
}
extern "C" {
    pub fn sgxsd_ocall_reply(
        retval: *mut sgx_status_t,
        reply_header: *const sgxsd_msg_header_t,
        reply_data: *const u8,
        reply_data_size: usize,
        msg_tag: sgxsd_msg_tag_t,
    ) -> sgx_status_t;
}
extern "C" {
    pub fn sgx_oc_cpuidex(cpuinfo: *mut libc::c_int, leaf: libc::c_int, subleaf: libc::c_int) -> sgx_status_t;
}
extern "C" {
    pub fn sgx_thread_wait_untrusted_event_ocall(retval: *mut libc::c_int, self_: *const libc::c_void) -> sgx_status_t;
}
extern "C" {
    pub fn sgx_thread_set_untrusted_event_ocall(retval: *mut libc::c_int, waiter: *const libc::c_void) -> sgx_status_t;
}
extern "C" {
    pub fn sgx_thread_setwait_untrusted_events_ocall(
        retval: *mut libc::c_int,
        waiter: *const libc::c_void,
        self_: *const libc::c_void,
    ) -> sgx_status_t;
}
extern "C" {
    pub fn sgx_thread_set_multiple_untrusted_events_ocall(
        retval: *mut libc::c_int,
        waiters: *mut *const libc::c_void,
        total: usize,
    ) -> sgx_status_t;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct __va_list_tag {
    pub gp_offset: libc::c_uint,
    pub fp_offset: libc::c_uint,
    pub overflow_arg_area: *mut libc::c_void,
    pub reg_save_area: *mut libc::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::core::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::core::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__va_list_tag), "::", stringify!(gp_offset))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(__va_list_tag), "::", stringify!(fp_offset))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(__va_list_tag), "::", stringify!(overflow_arg_area))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(__va_list_tag), "::", stringify!(reg_save_area))
    );
}
impl Default for __va_list_tag {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
